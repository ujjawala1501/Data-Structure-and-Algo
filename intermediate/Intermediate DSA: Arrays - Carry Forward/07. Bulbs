Problem Description
A wire connects N light bulbs.
Each bulb has a switch associated with it; however, due to faulty wiring, a switch also changes the state of all the bulbs to the right of the current bulb.
Given an initial state of all bulbs, find the minimum number of switches you have to press to turn on all the bulbs.
You can press the same switch multiple times.

Note: 0 represents the bulb is off and 1 represents the bulb is on.

Problem Constraints
0 <= N <= 5Ã—105
0 <= A[i] <= 1

Input Format
The first and the only argument contains an integer array A, of size N.

Output Format
Return an integer representing the minimum number of switches required.

Example Input
Input 1:
 A = [0, 1, 0, 1]

Input 2:
 A = [1, 1, 1, 1]

Example Output
Output 1:
 4

Output 2:
 0
 
 SOLUTION:
 class Solution:
	# @param A : list of integers
	# @return an integer
	def bulbs(self, A):
        n=len(A)
        count = 0
        for i in range(n):
            # if the bulb's original state is on and count
            # is even, it is currently on...
            # no need to press this switch
            if (A[i] == 1 and count % 2 == 0):
                continue
    
            # If the bulb's original state is off and count
            # is odd, it is currently on...
            # no need to press this switch
            elif(A[i] == 0 and count % 2 != 0):
                continue
    
            # if the bulb's original state is on and count
            # is odd, it is currently off...
            # Press this switch to on the bulb and increase
            # the count
            elif (A[i] == 1 and count % 2 != 0):
                count += 1
    
            # if the bulb's original state is off and
            # count is even, it is currently off...
            # press this switch to on the bulb and
            # increase the count
            elif (A[i] == 0 and count % 2 == 0):
                count += 1
        return count
