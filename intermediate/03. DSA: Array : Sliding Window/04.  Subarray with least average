Problem Description
Given an array of size N, find the subarray of size K with the least average.



Problem Constraints
1<=k<=N<=1e5
-1e5<=A[i]<=1e5


Input Format
First argument contains an array A of integers of size N.
Second argument contains integer k.


Output Format
Return the index of the first element of the subarray of size k that has least average.
Array indexing starts from 0.


Example Input
Input 1:
A=[3, 7, 90, 20, 10, 50, 40]
B=3
Input 2:

A=[3, 7, 5, 20, -10, 0, 12]
B=2


Example Output
Output 1:
3
Output 2:

4


Example Explanation
Explanation 1:
Subarray between indexes 3 and 5
The subarray {20, 10, 50} has the least average 
among all subarrays of size 3.
Explanation 2:

 Subarray between [4, 5] has minimum average

SOLUTION:
class Solution:
    # @param A : list of integers
    # @param B : integer
    # @return an integer
    def solve(self, A, B):
        N=len(A)
        if (N < B): return 0
 
        # Initialize beginning index of result
        res_index = 0
    
        # Compute sum of first subarray of size k
        curr_sum = 0
        for i in range(B):
            curr_sum += A[i]
    
        # Initialize minimum sum as current sum
        min_sum = curr_sum
    
        # Traverse from (k + 1)'th
        # element to n'th element
        for i in range(B, N):
        
            # Add current item and remove first
            # item of previous subarray
            curr_sum += A[i] - A[i-B]
    
            # Update result if needed
            if (curr_sum < min_sum):
            
                min_sum = curr_sum
                res_index = (i - B + 1)
        return res_index
        
            
        #print("Subarray between [", res_index,
         #   ", ", (res_index + B - 1),
          #  "] has minimum average")
    
