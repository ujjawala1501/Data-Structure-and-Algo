Problem Description
You are given a string A of size N.
Return the string A after reversing the string word by word.

NOTE:
A sequence of non-space characters constitutes a word.
Your reversed string should not contain leading or trailing spaces, even if it is present in the input string.
If there are multiple spaces between words, reduce them to a single space in the reversed string.

Problem Constraints
1 <= N <= 3 * 105

Input Format
The only argument given is string A.

Output Format
Return the string A after reversing the string word by word.

Example Input
Input 1:
    A = "the sky is blue"
Input 2:
    A = "this is ib"


Example Output
Output 1:
    "blue is sky the"
Output 2:
    "ib is this"    


Example Explanation
Explanation 1:
    We reverse the string word by word so the string becomes "blue is sky the".
Explanation 2:
    We reverse the string word by word so the string becomes "ib is this".
    
SOLUTION:
class Solution:
    # @param A : string
    # @return a strings
    def solve(self, A):
            n = len(A)
            i = n-1
            result = ""
            while (i>=0):
                if(A[i]!=" "):
                   # As characters in the word should not be reversed
                   # j = index of last char in the word  
                   j = i
                   while(A[i] != " "):
                       i -=1
                   result += A[i+1:j+1] # i has reached till empty space, hence slice the string from i+1
                else:
                    if not( i == n-1 or i == 0):
                      result +=" "
                    # Avoding extra spaces in between the words  
                    while(A[i] == " "):
                      i -= 1
            return result
     
