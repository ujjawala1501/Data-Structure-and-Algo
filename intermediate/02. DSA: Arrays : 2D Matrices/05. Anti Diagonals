Problem Description
Give a N * N square matrix A, return an array of its anti-diagonals. Look at the example for more details.


Problem Constraints
1<= N <= 1000
1<= A[i][j] <= 1e9


Input Format
Only argument is a 2D array A of size N * N.


Output Format
Return a 2D integer array of size (2 * N-1) * N, representing the anti-diagonals of input array A.
The vacant spaces in the grid should be assigned to 0.


Example Input
Input 1:
1 2 3
4 5 6
7 8 9
Input 2:

1 2
3 4


Example Output
Output 1:
1 0 0
2 4 0
3 5 7
6 8 0
9 0 0
Output 2:

1 0
2 3
4 0


Example Explanation
For input 1:
The first anti diagonal of the matrix is [1 ], the rest spaces shoud be filled with 0 making the row as [1, 0, 0].
The second anti diagonal of the matrix is [2, 4 ], the rest spaces shoud be filled with 0 making the row as [2, 4, 0].
The third anti diagonal of the matrix is [3, 5, 7 ], the rest spaces shoud be filled with 0 making the row as [3, 5, 7].
The fourth anti diagonal of the matrix is [6, 8 ], the rest spaces shoud be filled with 0 making the row as [6, 8, 0].
The fifth anti diagonal of the matrix is [9 ], the rest spaces shoud be filled with 0 making the row as [9, 0, 0].
For input 2:

The first anti diagonal of the matrix is [1 ], the rest spaces shoud be filled with 0 making the row as [1, 0, 0].
The second anti diagonal of the matrix is [2, 4 ], the rest spaces shoud be filled with 0 making the row as [2, 4, 0].
The third anti diagonal of the matrix is [3, 0, 0 ], the rest spaces shoud be filled with 0 making the row as [3, 0, 0].

SOLUTION:

# the ouput has been divide into three parts:
    # upper triangle . lower trainagle, putting 0s in empty spaces


    #With every movement, the row increases by one, and the column decreases by one
    #( or in other words, (1, -1) gets added to the current coordinates).
    # Now, all we need to know is the start ( or the first element ) in each diagonal for each triangle

    #1
    #2 4
    #3 5 7----> Upper triangle

    #6 8-----> lower traingle
    #9
class Solution:
    def diagonal(self, A):                
        N=len(A)
        rows=len(A)
        columns=len(A[0])
        B=[]

        for c in range(columns):  
            j=c
            C=[]
            for i in range(rows):
                if j<0:
                    break
                C.append(A[i][j])
                j-=1                
            B.append(C)

        for c in range(1,rows):  
            j=columns-1            
            C=[]
            for i in range(c, rows):
                if j<0:
                    break
                C.append(A[i][j])
                j-=1
            B.append(C)

        for i in B:                 # here width is N laready pointed out in question in output format section
            for j in range(N):      # so if any row width is not N then empty spaces  gets filled by 0's
                if len(i)!=N:
                    i.append(0)    

        return B
