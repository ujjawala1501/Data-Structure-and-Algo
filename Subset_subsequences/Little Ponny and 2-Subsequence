Problem Description

Little Ponny has been given a string A, and he wants to find out the lexicographically minimum subsequence from it of size >= 2. Can you help him?

A string a is lexicographically smaller than string b, if the first different letter in a and b is smaller in a. For example, "abc" is lexicographically smaller than "acc" because the first different letter is 'b' and 'c' which is smaller in "abc".

 
Problem Constraints

1 <= |A| <= 105

A only contains lowercase alphabets.

Input Format

The first and the only argument of input contains the string, A.

Output Format

Return a string representing the answer.


Example Input

Input 1:

 A = "abcdsfhjagj" 
Input 2:

 A = "ksdjgha" 


Example Output

Output 1:

 "aa" 
Output 2:

 "da" 


Example Explanation

Explanation 1:

 "aa" is the lexicographically minimum subsequence from A. 
Explanation 2:

 "da" is the lexicographically minimum subsequence from A. 
 
 SOLUTION:
 
# THIS WILL HELP UNDERSTANDING -https://www.youtube.com/watch?v=wuwE7g8VvgQ
    def solve(A):
        # Things to Note here:
        # Given min 2 characters.
        # So at first iteration, we need only to iterate from 0 to n-2
        # Also, the second iteration should start after the index of last iteration
        # So the problem boils down to find the first minimum letter from index 0 to n-2
        # and then second letter from previous letter index+1 to end of the string

        res = ''
        ans = [0]*len(A)
        lastminindex = -1
        for i in range(1,-1,-1):
            currentminimum = ord('z')
            for j in range(lastminindex+1,len(A)-i):
                if( ord(A[j]) < currentminimum ):
                    currentminimum = ord(A[j])
                    lastminindex = j
            res+=A[lastminindex]
        return res
